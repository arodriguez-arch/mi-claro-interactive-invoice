/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Environment } from "./services/bill.service";
export { Environment } from "./services/bill.service";
export namespace Components {
    interface MiClaroInteractiveInvoice {
        /**
          * @default ['846045754', '769001587', '805437569', '799704751', '805437569']
         */
        "accountList": string[];
        "customerName"?: string;
        /**
          * @default ''
         */
        "defaultSelectedAccount"?: string;
        "environment": Environment;
        /**
          * @default ''
         */
        "token"?: string;
        "totalAPagar"?: number;
        "vencimientoDate"?: string;
    }
}
export interface MiClaroInteractiveInvoiceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiClaroInteractiveInvoiceElement;
}
declare global {
    interface HTMLMiClaroInteractiveInvoiceElementEventMap {
        "goToSupport": void;
        "payPendingBills": void;
        "payBill": { billId: string; amount?: number };
        "automatePayments": boolean;
        "questionsPressed": void;
        "contactPressed": void;
        "downloadBills": void;
        "accountChanged": string;
    }
    interface HTMLMiClaroInteractiveInvoiceElement extends Components.MiClaroInteractiveInvoice, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMiClaroInteractiveInvoiceElementEventMap>(type: K, listener: (this: HTMLMiClaroInteractiveInvoiceElement, ev: MiClaroInteractiveInvoiceCustomEvent<HTMLMiClaroInteractiveInvoiceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMiClaroInteractiveInvoiceElementEventMap>(type: K, listener: (this: HTMLMiClaroInteractiveInvoiceElement, ev: MiClaroInteractiveInvoiceCustomEvent<HTMLMiClaroInteractiveInvoiceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMiClaroInteractiveInvoiceElement: {
        prototype: HTMLMiClaroInteractiveInvoiceElement;
        new (): HTMLMiClaroInteractiveInvoiceElement;
    };
    interface HTMLElementTagNameMap {
        "mi-claro-interactive-invoice": HTMLMiClaroInteractiveInvoiceElement;
    }
}
declare namespace LocalJSX {
    interface MiClaroInteractiveInvoice {
        /**
          * @default ['846045754', '769001587', '805437569', '799704751', '805437569']
         */
        "accountList"?: string[];
        "customerName"?: string;
        /**
          * @default ''
         */
        "defaultSelectedAccount"?: string;
        "environment": Environment;
        "onAccountChanged"?: (event: MiClaroInteractiveInvoiceCustomEvent<string>) => void;
        "onAutomatePayments"?: (event: MiClaroInteractiveInvoiceCustomEvent<boolean>) => void;
        "onContactPressed"?: (event: MiClaroInteractiveInvoiceCustomEvent<void>) => void;
        "onDownloadBills"?: (event: MiClaroInteractiveInvoiceCustomEvent<void>) => void;
        "onGoToSupport"?: (event: MiClaroInteractiveInvoiceCustomEvent<void>) => void;
        "onPayBill"?: (event: MiClaroInteractiveInvoiceCustomEvent<{ billId: string; amount?: number }>) => void;
        "onPayPendingBills"?: (event: MiClaroInteractiveInvoiceCustomEvent<void>) => void;
        "onQuestionsPressed"?: (event: MiClaroInteractiveInvoiceCustomEvent<void>) => void;
        /**
          * @default ''
         */
        "token"?: string;
        "totalAPagar"?: number;
        "vencimientoDate"?: string;
    }
    interface IntrinsicElements {
        "mi-claro-interactive-invoice": MiClaroInteractiveInvoice;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mi-claro-interactive-invoice": LocalJSX.MiClaroInteractiveInvoice & JSXBase.HTMLAttributes<HTMLMiClaroInteractiveInvoiceElement>;
        }
    }
}
